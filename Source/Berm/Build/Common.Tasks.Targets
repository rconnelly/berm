<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <MSBuildProgramFiles64>C:\Program Files</MSBuildProgramFiles64>
        <StyleCopTaskAssembly Condition="'$(StyleCopTaskAssembly)' == ''">$(MSBuildProgramFiles32)\StyleCop 4.7\StyleCop.dll</StyleCopTaskAssembly>
        <NUnitPath Condition="'$(NUnitPath)' == ''">$(MSBuildProgramFiles32)\NUnit 2.5.7\bin\net-2.0</NUnitPath>
        <NUnitEXE Condition="'$(NUnitEXE)' == ''">nunit-console.exe</NUnitEXE>
        <NCoverPath Condition="'$(NCoverPath)' == ''">$(MSBuildProgramFiles64)\NCover</NCoverPath>
        <NCoverPathx64 Condition="'$(NCoverPathx64)' == ''">$(MSBuildProgramFiles64)\NCover</NCoverPathx64>
        <FxCopPath Condition="'$(FxCopPath)' == ''">$(MSBuildProgramFiles32)\Microsoft Fxcop 10.0</FxCopPath>
        <SimianPath Condition="'$(SimianPath)' == ''">$(MSBuildProgramFiles32)\Simian\bin</SimianPath>
        <ExtensionTasksPath>.\</ExtensionTasksPath>
        <MSBuildCommunityTasksPath>.\</MSBuildCommunityTasksPath>
        <MSBuildMercurialTasksPath>.\</MSBuildMercurialTasksPath>
        <MSBuildGitTasksPath>.\</MSBuildGitTasksPath>
        <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>
    </PropertyGroup>
    <PropertyGroup>
        <CoverageReports>
            <Report>
                <ReportType>SymbolModule</ReportType>
                <Format>Xml</Format>
                <OutputPath>Metrics\$(ProductName).ncover-results.xml</OutputPath>
            </Report>
        </CoverageReports>
    </PropertyGroup>

    <Import Project=".\Tasks\MSBuild.ExtensionPack.Tasks\MSBuild.ExtensionPack.tasks" />
    <Import Project=".\Tasks\MSBuild.Community.Tasks\MSBuild.Community.Tasks.Targets" />
    <Import Project=".\Tasks\MSBuild.Ncover.Tasks\NCover.MSBuildTasks.Targets" />
    <Import Project=".\Tasks\MSBuild.Mercurial\MSBuild.Mercurial.tasks" />
    <Import Project=".\Tasks\MSBuild.Git\MSBuild.Git.tasks" />
    <UsingTask AssemblyFile="$(StyleCopTaskAssembly)" TaskName="Microsoft.StyleCop.StyleCopTask" />


    <!--///////////////////////////Target ActualizeVersion//////////////////////////////////////////////////////////-->
    <Target Name="ActualizeVersion" Condition="$(PerformVersionActualization)"><!-- reads revision number from repository and use it in product version number -->

        <!-- read version from file -->
        <MSBuild.Community.Tasks.Version
             VersionFile="$(ProductVersionFile)"
             MajorType="None"
             MinorType="None"
             BuildType="None"
             RevisionType="None">
            <Output TaskParameter="Major" PropertyName="Major" />
            <Output TaskParameter="Minor" PropertyName="Minor" />
            <Output TaskParameter="Build" PropertyName="Build" />
        </MSBuild.Community.Tasks.Version>

        <ConvertToAbsolutePath Paths="$(ProjectRoot)">
            <Output TaskParameter="AbsolutePaths" PropertyName="ProjectRootAbsolute" />
        </ConvertToAbsolutePath>

        <!-- check that project is in svn -->
        <MSBuild.Community.Tasks.Subversion.SvnInfo LocalPath="$(ProjectRootAbsolute)" ContinueOnError="true">
          <Output TaskParameter="RepositoryRoot" PropertyName="RepositoryRoot" />
        </MSBuild.Community.Tasks.Subversion.SvnInfo>

        <!-- read revision from svn -->
        <MSBuild.Community.Tasks.Subversion.SvnVersion LocalPath="$(ProjectRootAbsolute)" ContinueOnError="false" Condition="$(RepositoryRoot)!=''" >
          <Output TaskParameter="Revision" PropertyName="BuildRevision" />
        </MSBuild.Community.Tasks.Subversion.SvnVersion>
        
        <!-- create build version number -->
        <CreateProperty Value="$(Major).$(Minor).$(Build).$(BuildRevision)">
            <Output
                TaskParameter="Value"
                PropertyName="ProductVersion" />
        </CreateProperty>
        
        <!-- create build informational version number -->
        <CreateProperty Value="$(ProductVersion)">
            <Output
                TaskParameter="Value"
                PropertyName="ProductInformationalVersion" />
        </CreateProperty>

        <!-- save to file current build version number -->
        <WriteLinesToFile Overwrite="true" File="$(BuildVersionFile)" Lines="$(ProductInformationalVersion)" />

    </Target>
    <!--///////////////////////////End Target ActualizeVersion//////////////////////////////////////////////////////-->


    <!--///////////////////////////Target PropogateVersion//////////////////////////////////////////////////////////-->
    <Target Name="PropagateVersion" Condition="$(PerformVersionActualization) AND $(PerformVersionPropagation)"><!-- generates .cs file with version metadata and updates version inside deployed files -->

        <Message Text="Propagating product version $(ProductVersion)" />

        <CreateProperty Value="$(ProductVersion)">
            <Output
                TaskParameter="Value"
                PropertyName="AssemblyVersion" />
            <Output
                TaskParameter="Value"
                PropertyName="AssemblyFileVersion" />
        </CreateProperty>
        <CreateProperty Value="$(ProductInformationalVersion)">
            <Output
                TaskParameter="Value"
                PropertyName="AssemblyInformationalVersion" />
        </CreateProperty>

        <MSBuild.Community.Tasks.AssemblyInfo
            CodeLanguage="CS"
            OutputFile="$(GlobalVersionInfoFile)"
            AssemblyVersion="$(AssemblyVersion)"
            AssemblyFileVersion="$(AssemblyFileVersion)"
            AssemblyInformationalVersion="$(AssemblyInformationalVersion)" />
        <MSBuild.Community.Tasks.FileUpdate
            Condition="''!='@(VersionReplaceFileList)'"
            Files="@(VersionReplaceFileList)"
            Regex="($(ProductPrefix).*)(Version=\d+.\d+.\d+.\d+\x2C\s*Culture\x3Dneutral\x2C\s*PublicKeyToken\x3D$(PublicKeyToken))"
            ReplacementText="$1Version=$(AssemblyVersion), Culture=neutral, PublicKeyToken=$(PublicKeyToken)" />

    </Target>
    <!--///////////////////////////End Target PropogateVersion//////////////////////////////////////////////////////-->


    <!--///////////////////////////Target PrepareEnvironment////////////////////////////////////////////////////////-->
    <Target Name="PrepareEnvironment"><!-- removes folders from previous builds, creates folders for current build" /> -->

        <Delete 
            Files="$(CodeMetricsRoot)\$(ProductName)*.*" 
            Condition="Exists('$(CodeMetricsRoot)\$(ProductName)*.*')" />

        <MakeDir
            Directories="$(CodeMetricsRoot)"
            Condition="!Exists('$(CodeMetricsRoot)')" />

    </Target>
    <!--///////////////////////////End Target PrepareEnvironment////////////////////////////////////////////////////-->


    <!--///////////////////////////Target Clean/////////////////////////////////////////////////////////////////////-->
    <Target Name="Clean" Condition="$(PerformCleanBeforeBuild)"><!-- cleans previous compilation results -->

        <MSBuild
            Projects="@(CompileProjectList)"
            Properties="Configuration=$(Configuration)"
            StopOnFirstFailure="false"
            ContinueOnError="true"
            Targets="Clean" />

        <CreateItem
            Include="$(SolutionRoot)\**\*.csproj;$(SolutionRoot)\**\**\*.csproj;$(SolutionRoot)\**\**\*.wixproj"
            Exclude="">
            <Output TaskParameter="Include"
                ItemName="AllProjList" />
        </CreateItem>

        <RemoveDir Directories="@(AllProjList->'%(RootDir)%(Directory)bin');@(AllProjList->'%(RootDir)%(Directory)obj')" />

    </Target>
    <!--///////////////////////////End Target Clean/////////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target Compile///////////////////////////////////////////////////////////////////-->
    <Target Name="Compile" Condition="'@(CompileProjectList)'!=''"><!-- compiles applications -->

        <MSBuild
            Projects="@(CompileProjectList)"
            Properties="Configuration=$(Configuration);Platform=$(Platform);RevisionNumber=$(BuildRevision)"
            StopOnFirstFailure="true"
            ContinueOnError="false"
            Targets="Rebuild" />

    </Target>
    <!--///////////////////////////End Target Compile///////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target MakeDistributive//////////////////////////////////////////////////////////-->
    <Target Name="MakeDistributive">

        <CallTarget Targets="InitializeExtraTokens" />
        <CallTarget Targets="MakeDistributiveInitialSubstitute" />
        <CallTarget Targets="MakeDistributivePrepareFolders" />
        <CallTarget Targets="MakeDistributiveSubstitute" />
        <CallTarget Targets="MakeDistributiveSetupSubstitute" />

        <Copy
            SourceFiles="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile).bak"
            DestinationFiles="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)"
            Condition="Exists('$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile).bak')" />
        <Delete 
            Files="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile).bak" 
            Condition="Exists('$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile).bak')" />
            
    </Target>
    <!--///////////////////////////End Target MakeDistributive//////////////////////////////////////////////////////-->

    
    <!--///////////////////////////Target InitializeExtraTokens////////////////////////////////////////////////-->
    <Target Name="InitializeExtraTokens">
        <CreateItem 
            Include="ProductVersion"
            AdditionalMetadata="ReplacementValue=$(ProductVersion)">
            <Output 
                TaskParameter="Include" 
                ItemName="Tokens"/>
        </CreateItem>
        <CreateItem 
            Include="ProductInformationalVersion"
            AdditionalMetadata="ReplacementValue=$(ProductInformationalVersion)">
            <Output 
                TaskParameter="Include" 
                ItemName="Tokens"/>
        </CreateItem>
    </Target>
    <!--///////////////////////////End Target InitializeExtraTokens////////////////////////////////////////////////-->

    
    <!--///////////////////////////Target MakeDistributiveInitialSubstitute////////////////////////////////////////////////-->
    <Target Name="MakeDistributiveInitialSubstitute" Condition="'@(BeforePackSubstitutionFiles)'!=''" Inputs="@(BeforePackSubstitutionFiles)" Outputs="%(Identity)">

        <Copy
            SourceFiles="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)"
            DestinationFiles="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile).bak"
            Condition="Exists('$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)')" />
        
        <Message
            Text="Trying to substitute '$(BuildParamsRoot)\%(BeforePackSubstitutionFiles.Identity)' to '%(BeforePackSubstitutionFiles.ContentFile)'"
            Condition="Exists('$(BuildParamsRoot)\%(BeforePackSubstitutionFiles.Identity)')" />
        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)"
            SubstitutionsFile="$(BuildParamsRoot)\%(BeforePackSubstitutionFiles.Identity)"
            ContentRoot="%(BeforePackSubstitutionFiles.ContentRoot)"
            SubstitutionsRoot="%(BeforePackSubstitutionFiles.SubstitutionsRoot)"
            NamespaceDefinitions="%(BeforePackSubstitutionFiles.NamespaceDefinitions)"
            Condition="Exists('$(BuildParamsRoot)\%(BeforePackSubstitutionFiles.Identity)')"
            MergedFile="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)" />
        <Message
            Text="Done"
            Condition="Exists('$(BuildParamsRoot)\%(BeforePackSubstitutionFiles.Identity)')" />

        <Message
            Text="Trying to substiture '$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionFiles.Identity)' to '%(BeforePackSubstitutionFiles.ContentFile)'"
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionFiles.Identity)')" />
        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)"
            SubstitutionsFile="$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionFiles.Identity)"
            ContentRoot="%(BeforePackSubstitutionFiles.ContentRoot)"
            SubstitutionsRoot="%(BeforePackSubstitutionFiles.SubstitutionsRoot)"
            NamespaceDefinitions="%(BeforePackSubstitutionFiles.NamespaceDefinitions)"
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionFiles.Identity)')"
            MergedFile="$(SolutionRoot)\%(BeforePackSubstitutionFiles.ContentFile)" />
        <Message
            Text="Done"
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionFiles.Identity)')" />

        <Message
            Text="!!! Trying to substitute '$(SolutionRoot)\%(BeforePackSubstitutionNOXMLFiles.ContentFile)' to '$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionNOXMLFiles.Identity)'"
         />

        <Copy
            SourceFiles="$(BuildParamsRoot)\$(BuildType)\%(BeforePackSubstitutionNOXMLFiles.Identity)"
            DestinationFiles="$(SolutionRoot)\%(BeforePackSubstitutionNOXMLFiles.ContentFile)"
            Condition="'@(BeforePackSubstitutionNOXMLFiles)'!=''" />

    </Target>
    <!--///////////////////////////End Target MakeDistributiveInitialSubstitute////////////////////////////////////////////////-->

    
    <!--///////////////////////////Target MakeDistributivePrepareFolders////////////////////////////////////////////-->
    <Target Name="MakeDistributivePrepareFolders">

        <RemoveDir Directories="$(AssemblyRoot)\" />
        <!-- Clean ClientDir -->
        <RemoveDir Directories="$(ProjectRoot)\%(ProjectToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)" />
        <RemoveDir Directories="$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)" />

        <!-- applications publishing -->
        <CallTarget Targets="PublishProjects" />
        <CallTarget Targets="PublishCOProjects" />
        <CallTarget Targets="PackageProjects" />
        <CallTarget Targets="MonoDroidProjects" />
        <CallTarget Targets="CopyApplications" />
        <CallTarget Targets="CopyFiles" />

        <!-- ApplicationsMonoDroid -->
        <Exec Command='xcopy /E /Q /Y "$(SolutionRoot)\%(ProjectMonoAndroid.RelativeDir)bin\$(Configuration)\*.apk" "$(ProjectRoot)\%(ProjectMonoAndroid.PathCopy)\Client\"' 
               Condition="'@(ProjectMonoAndroid)'!=''"/>

        <!-- tools files -->
        <CreateItem Include="$(SetupParamsRoot)\$(DeploymentEnvironmentType)\*.cmd">
            <Output TaskParameter="Include" ItemName="CMDEnvTypeFiles"/>
        </CreateItem>

        <Exec
            Command="xcopy /I /E /Q /Y &quot;$(SetupParamsRoot)\$(DeploymentEnvironmentType)\*.cmd&quot; &quot;$(AssemblyRoot)\Tools\DB&quot;"
            Condition="'@(CMDEnvTypeFiles)'!=''"
         />

        <Exec
            Command="xcopy /E /Q /Y &quot;$(ToolsRoot)\DB&quot; &quot;$(AssemblyRoot)\Tools\DB\&quot;"
            Condition="'@(CMDEnvTypeFiles)'!='' or '$(PerformUnitTestPrepare)' == 'true'"
         />

        <Exec
            Command="xcopy /E /Q /Y &quot;$(ToolsRoot)\IIS\*.*&quot; &quot;$(AssemblyRoot)\Tools\IIS\&quot;"
            Condition="'$(PerformArchive)' == 'true'"
         />


        <!-- applications tests -->
        <Exec
            Command="xcopy /E /Q /Y &quot;%(TestProjectList.RootDir)%(TestProjectList.Directory)bin\$(Configuration)&quot; &quot;$(AssemblyRoot)\Tests\&quot;"
            Condition="Exists('%(TestProjectList.RootDir)%(TestProjectList.Directory)bin\$(Configuration)')"
            />

        <!-- Setup scripts -->
        <CreateItem Include="$(SetupParamsRoot)\$(DeploymentEnvironmentType)*.*">
            <Output TaskParameter="Include" ItemName="AllEnvTypeFiles"/>
        </CreateItem>

        <Exec
            Command="xcopy /E /Q /Y &quot;$(SetupParamsRoot)\$(DeploymentEnvironmentType)&quot; &quot;$(AssemblyRoot)&quot;"
            Condition="'@(AllEnvTypeFiles)'!=''"
            />

        <CreateItem Include="$(BuildParamsRoot)\*.cmd">
            <Output TaskParameter="Include" ItemName="CMDBuildFiles"/>
        </CreateItem>

        <Exec
            Command="xcopy /I /Q /Y &quot;$(BuildParamsRoot)\*.cmd&quot; &quot;$(AssemblyRoot)\Tools\DB&quot;"
            Condition="'@(CMDBuildFiles)'!=''"
            />

        <CreateItem Include="$(AssemblyRoot)\*.override;
                            $(AssemblyRoot)\Custom.Targets">
            <Output TaskParameter="Include" ItemName="DelAssemblyFiles"/>
        </CreateItem>

        <Delete Files="@(DelAssemblyFiles)" />
        
        <Exec
            Command="xcopy /E /Q /Y &quot;$(SetupParamsRoot)\Output&quot; &quot;$(AssemblyRoot)\&quot;"
            Condition="Exists('$(SetupParamsRoot)\Output')"
            />
            
    </Target>
    <!--///////////////////////////End Target MakeDistributivePrepareFolders////////////////////////////////////////-->


    <!--///////////////////////////Target PackageProjects////////////////////////////////////////-->
    <Target Name="PackageProjects" Inputs="@(ProjectToPackage)" Outputs="%(Identity).Dummy" Condition="'@(ProjectToPackage)'!=''">

        <CreateProperty
            Value="C:\Package\$(BuildType)-$(ProductVersion)">
            <Output
                    TaskParameter="Value"
                    PropertyName="PackageTempDir" />
        </CreateProperty>
        <ConvertToAbsolutePath Paths="$(AssemblyRoot)">
            <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteAssemblyRoot"/>
        </ConvertToAbsolutePath>

        <MSBuild
            Projects="$(SolutionRoot)\%(ProjectToPackage.Identity)"
            Properties="Configuration=$(Configuration);IncludeAppPool=true;_PackageTempDir=$(PackageTempDir);DesktopBuildPackageLocation=$(AbsoluteAssemblyRoot)\%(ProjectToPackage.Path)\%(ProjectToPackage.Filename).zip"
            StopOnFirstFailure="true"
            ContinueOnError="false"
            Targets="Package" />

        <RemoveDir Directories="$(PackageTempDir)" />

    </Target>
    <!--///////////////////////////End Target PackageProjects////////////////////////////////////////-->


    <!--///////////////////////////Target PublishProjects////////////////////////////////////////-->
    <Target Name="PublishProjects" Inputs="@(ProjectToPublish)" Outputs="%(Identity).Dummy" Condition="'@(ProjectToPublish)'!=''">

        <ConvertToAbsolutePath Paths="$(AssemblyRoot)">
            <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteAssemblyRoot"/>
        </ConvertToAbsolutePath>
        
        <MSBuild
            Projects="$(SolutionRoot)\%(ProjectToPublish.Identity)"
            Properties="Configuration=$(Configuration);TargetProfile=%(ProjectToPublish.TargetProfile);PublishDir=$(AbsoluteAssemblyRoot)\%(ProjectToPublish.Path)\"
            StopOnFirstFailure="true"
            ContinueOnError="false"
            Targets="Publish" />

    </Target>
    <!--///////////////////////////End Target PublishProjects////////////////////////////////////////-->


    <!--///////////////////////////Target CopyApplications////////////////////////////////////////-->
    <Target Name="CopyApplications" Inputs="@(ApplicationToPublish)" Outputs="%(Identity).Dummy" Condition="'@(ApplicationToPublish)'!=''">

        <Exec
            Command="xcopy /E /Q /Y &quot;$(SolutionRoot)\%(ApplicationToPublish.Identity)&quot; &quot;$(AssemblyRoot)\%(ApplicationToPublish.Path)\&quot;"
            />

     </Target>
    <!--///////////////////////////End Target CopyApplications////////////////////////////////////////-->


    <!--///////////////////////////Target PublishCOProjects////////////////////////////////////////-->
    <Target Name="PublishCOProjects" Inputs="@(ProjectCOToPublish)" Outputs="%(Identity).Dummy" Condition="'@(ProjectCOToPublish)'!=''">

        <ConvertToAbsolutePath Paths="$(AssemblyRoot)">
            <Output TaskParameter="AbsolutePaths" PropertyName="AbsoluteAssemblyRoot"/>
        </ConvertToAbsolutePath>
        
        <!--MSBuild
            Projects="$(SolutionRoot)\%(ProjectToPublish.Identity)"
            Properties="Configuration=$(Configuration);TargetProfile=%(ProjectToPublish.TargetProfile);PublishDir=$(AbsoluteAssemblyRoot)\%(ProjectToPublish.Path)\"
            StopOnFirstFailure="true"
            ContinueOnError="false"
            Targets="Publish" /-->

       <!-- Publish ClickOnce projects -->

    <!-- Required to prepare win applications publish -->

       <MSBuild
            Projects="$(SolutionRoot)\%(ProjectCOToPublish.Identity)"
            Properties="Configuration=$(Configuration)"
            StopOnFirstFailure="true"
            ContinueOnError="false" />

       <CreateItem Include="$(SetupParamsRoot)\$(DeploymentEnvironmentType)\*.override">
            <Output TaskParameter="Include" ItemName="SetupEnvTypeOverrideFiles"/>
        </CreateItem>

        <ItemGroup>
            <SetupContentEnvTypeFiles Include="$(SolutionRoot)\**\bin\$(Configuration)\%(SetupEnvTypeOverrideFiles.Filename)">
                <SubstitutionsFile>%(SetupEnvTypeOverrideFiles.Identity)</SubstitutionsFile>
            </SetupContentEnvTypeFiles>
        </ItemGroup>

        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="%(SetupContentEnvTypeFiles.Identity)"
            SubstitutionsFile="%(SetupContentEnvTypeFiles.SubstitutionsFile)"
            Condition="'@(SetupContentEnvTypeFiles)'!=''"
         />
        
        <ItemGroup Condition="'@(Tokens)' != ''" >
            <TokenizedEnvTypeFiles Include="$(SolutionRoot)\**\bin\$(Configuration)\%(SetupEnvTypeOverrideFiles.Filename)" />
        </ItemGroup>
        <Message Text="Will be tokenized: %(TokenizedEnvTypeFiles.Identity)" />
        <TemplateFile Template="%(TokenizedEnvTypeFiles.FullPath)" OutputFilename="%(TokenizedEnvTypeFiles.FullPath).out" Tokens="@(Tokens)" Condition="'@(TokenizedEnvTypeFiles)'!=''" />
        <Copy SourceFiles="%(TokenizedEnvTypeFiles.FullPath).out" DestinationFiles="%(TokenizedEnvTypeFiles.FullPath)"	Condition="'@(TokenizedEnvTypeFiles)'!=''" />
        <Delete Files="%(TokenizedEnvTypeFiles.FullPath).out" Condition="'@(TokenizedEnvTypeFiles)'!=''" />

    <!-- remove UnnecessaryClientAppFiles -->
    <CreateItem
      Include="$(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)\*.xml;
               $(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)\*.application;
               $(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)\*.pdb;
               $(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)\*.manifest;
               $(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)\**\*.resources">
      <Output TaskParameter="Include"
              ItemName="UnnecessaryClientAppFiles"
    />
    </CreateItem>

    <Delete Files="@(UnnecessaryClientAppFiles)" />
    <Exec Command='xcopy /E /Q /Y "$(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration)" "$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\"' />

    <!-- create Application manifest -->
    <Exec
      Command="$(ToolsRoot)\SDK\mage.exe -New Application -FromDirectory $(SolutionRoot)\%(ProjectCOToPublish.RelativeDir)bin\$(Configuration) -Name &quot;$(ClickOnceAppTittle)$(ClickOnceAppTittleAddin)&quot; -ToFile $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest -Version $(ProductVersion) -Processor $(Processor) -TrustLevel FullTrust -UseManifestForTrust true -Publisher &quot;АСКОД&quot; -IconFile Resources\askod_icon_48x48.ico"
      WorkingDirectory=""
      Condition=""
      ContinueOnError="false" />

    <!-- change language in manifest -->
    <MSBuild.Community.Tasks.FileUpdate
        Files="$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest"
        Regex="(&lt;asmv1:assemblyIdentity.*)(language=&quot;neutral&quot;)"
        ReplacementText="$1language=&quot;uk-UA&quot;" />

    <!-- sign Application manifest -->
    <Exec
      Command="$(ToolsRoot)\SDK\mage.exe -Sign $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest -CertFile $(ProjectRoot)\Common\ChiefMobile.pfx -Password 1"
      WorkingDirectory=""
      Condition=""
      ContinueOnError="false" />

    <!--SignFile
      CertificateThumbprint="$(Thumbprint)"
      SigningTarget="@(ApplicationManifest)"/-->


    <!--GenerateApplicationManifest
      AssemblyName="%(ProjectCOToPublish.FileName).exe"
      AssemblyVersion="$(ProductVersion)"
      EntryPoint="@(EntryPoint)"
      OutputManifest="$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest">
      <Output
        ItemName="ApplicationManifest"
        TaskParameter="OutputManifest"/>
    </GenerateApplicationManifest-->


    <!-- create Deployment manifest -->
    <Exec
      Command="$(ToolsRoot)\SDK\mage.exe -New Deployment -AppCodeBase %(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest -AppManifest $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName)\%(ProjectCOToPublish.FileName).exe.manifest -Install true -Name &quot;$(ClickOnceDepTittle)$(ClickOnceDepTittleAddin)&quot; -ToFile $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName).application -IncludeProviderURL true -ProviderUrl $(AppCOURL)/%(ProjectCOToPublish.NameFolder)-$(DeploymentEnvironmentType)/client/%(ProjectCOToPublish.FileName).application -Version $(ProductVersion) -Processor $(Processor) -Publisher &quot;АСКОД&quot;"
      WorkingDirectory=""
      Condition=""
      ContinueOnError="false" />

    <!-- change language in manifest -->
    <MSBuild.Community.Tasks.FileUpdate
        Files="$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName).application"
        Regex="language=&quot;neutral&quot;"
        ReplacementText="language=&quot;uk-UA&quot;" />

    <!-- change update strategy in manifest -->
    <MSBuild.Community.Tasks.FileUpdate
        Files="$(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName).application"
        Regex="&lt;expiration\s*maximumAge=&quot;0&quot;\s*unit=&quot;days&quot;\s*/&gt;"
        ReplacementText="&lt;beforeApplicationStartup/&gt;" />

    <!-- add minVersion for update strategy in manifest -->
    <Exec
      Command="$(ToolsRoot)\SDK\mage.exe -Update $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName).application -Publisher &quot;Client Mock&quot; -MinVersion $(ProductVersion)"
      WorkingDirectory=""
      Condition=""
      ContinueOnError="false" />

    <!--GenerateDeploymentManifest
      AssemblyName="SimpleWinApp.application"
      AssemblyVersion="1.0.0.0"
      EntryPoint="@(ApplicationManifest)"
      Install="false"
      OutputManifest="SimpleWinApp.application">
      <Output
        ItemName="DeployManifest"
        TaskParameter="OutputManifest"/>
    </GenerateDeploymentManifest-->


   <!-- sign Deployment manifest -->
    <Exec
      Command="$(ToolsRoot)\SDK\mage.exe -Sign $(ProjectRoot)\%(ProjectCOToPublish.PathCopy)\Client\%(ProjectCOToPublish.FileName).application -CertFile $(ProjectRoot)\Common\ChiefMobile.pfx -Password 1"
      WorkingDirectory=""
      Condition=""
      ContinueOnError="false" />

     <!--SignFile
      CertificateThumbprint="$(Thumbprint)"
      SigningTarget="@(DeployManifest)"/-->


    </Target>
    <!--///////////////////////////End Target PublishProjects////////////////////////////////////////-->


    <!--///////////////////////////Target MonoDroidProjects////////////////////////////////////////-->
    <Target Name="MonoDroidProjects" Inputs="@(ProjectMonoAndroid)" Outputs="%(Identity).Dummy" Condition="'@(ProjectMonoAndroid)'!=''">

      <MSBuild
       Projects="$(SolutionRoot)\%(ProjectMonoAndroid.Identity)"
       Properties="Configuration=$(Configuration)"
       StopOnFirstFailure="true"
       ContinueOnError="false"
       Targets="SignAndroidPackage"
      />

    </Target>
    <!--///////////////////////////End Target MonoDroidProjects////////////////////////////////////////-->


    <!--///////////////////////////Target CopyFiles////////////////////////////////////////-->
    <Target Name="CopyFiles" Inputs="@(FileToPublish)" Outputs="%(Identity).Dummy" Condition="'@(FileToPublish)'!=''">

        <Exec
            Command="xcopy /Y &quot;$(SolutionRoot)\%(FileToPublish.Identity)&quot; &quot;$(AssemblyRoot)\%(FileToPublish.Path)\&quot;"
            />

     </Target>
    <!--///////////////////////////End Target CopyFiles////////////////////////////////////////-->

    
    <!--///////////////////////////Target MakeDistributiveSubstitute////////////////////////////////////////////////-->
    <Target Name="MakeDistributiveSubstitute" Condition="'@(AfterPackSubstitutionFiles)'!=''" Inputs="@(AfterPackSubstitutionFiles)" Outputs="%(Identity)">

        <Message
            Text="Trying to substiture '$(BuildParamsRoot)\%(AfterPackSubstitutionFiles.Identity)' to '%(AfterPackSubstitutionFiles.ContentFile)'"
            Condition="Exists('$(BuildParamsRoot)\%(AfterPackSubstitutionFiles.Identity)')" />
        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="$(AssemblyRoot)\%(AfterPackSubstitutionFiles.ContentFile)"
            SubstitutionsFile="$(BuildParamsRoot)\%(AfterPackSubstitutionFiles.Identity)"
            ContentRoot="%(AfterPackSubstitutionFiles.ContentRoot)"
            SubstitutionsRoot="%(AfterPackSubstitutionFiles.SubstitutionsRoot)"
            NamespaceDefinitions="%(AfterPackSubstitutionFiles.NamespaceDefinitions)"
            Condition="Exists('$(BuildParamsRoot)\%(AfterPackSubstitutionFiles.Identity)')"
            MergedFile="$(AssemblyRoot)\%(AfterPackSubstitutionFiles.ContentFile)" />
        <Message
            Text="Done"
            Condition="Exists('$(BuildParamsRoot)\%(AfterPackSubstitutionFiles.Identity)')" />

        <Message
            Text="Trying to substiture '$(BuildParamsRoot)\$(BuildType)\%(AfterPackSubstitutionFiles.Identity)' to '%(AfterPackSubstitutionFiles.ContentFile)'"
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(AfterPackSubstitutionFiles.Identity)')" />
        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="$(AssemblyRoot)\%(AfterPackSubstitutionFiles.ContentFile)"
            SubstitutionsFile="$(BuildParamsRoot)\$(BuildType)\%(AfterPackSubstitutionFiles.Identity)"
            ContentRoot="%(AfterPackSubstitutionFiles.ContentRoot)"
            SubstitutionsRoot="%(AfterPackSubstitutionFiles.SubstitutionsRoot)"
            NamespaceDefinitions="%(AfterPackSubstitutionFiles.NamespaceDefinitions)"            
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(AfterPackSubstitutionFiles.Identity)')"
            MergedFile="$(AssemblyRoot)\%(AfterPackSubstitutionFiles.ContentFile)" />
        <Message
            Text="Done"
            Condition="Exists('$(BuildParamsRoot)\$(BuildType)\%(AfterPackSubstitutionFiles.Identity)')" />

    </Target>
    <!--///////////////////////////End Target MakeDistributiveSubstitute////////////////////////////////////////////-->


    <!--///////////////////////////Target MakeDistributiveSetupSubstitute////////////////////////////////////////////////-->
    <Target Name="MakeDistributiveSetupSubstitute">

        <CreateItem Include="$(SetupParamsRoot)\*.override">
            <Output TaskParameter="Include" ItemName="SetupOverrideFiles"/>
        </CreateItem>
        <CreateItem Include="$(SetupParamsRoot)\$(DeploymentEnvironmentType)\*.override">
            <Output TaskParameter="Include" ItemName="SetupOverrideFiles"/>
        </CreateItem>
        
        <CreateItem Include="$(AssemblyRoot)\**\%(SetupOverrideFiles.Filename)">
            <Output TaskParameter="Include" ItemName="SetupContentFiles"/>
        </CreateItem>

        <ItemGroup>
            <SetupContentFiles Include="$(AssemblyRoot)\**\%(SetupOverrideFiles.Filename)">
                <SubstitutionsFile>%(SetupOverrideFiles.Identity)</SubstitutionsFile>
            </SetupContentFiles>
        </ItemGroup>
    
        <MSBuild.Community.Tasks.Xml.XmlMassUpdate
            ContentFile="%(SetupContentFiles.Identity)"
            SubstitutionsFile="%(SetupContentFiles.SubstitutionsFile)"
            Condition="'@(SetupContentFiles)'!='' AND '%(SetupContentFiles.SubstitutionsFile)'!=''" />
        
        <ItemGroup Condition="'@(Tokens)' != ''" >
            <TokenizedFiles Include="$(AssemblyRoot)\**\*.cscfg;$(AssemblyRoot)\**\*.ps1;$(AssemblyRoot)\**\*.cmd;$(AssemblyRoot)\**\*.xml;$(AssemblyRoot)\**\*.config" />
        </ItemGroup>
        <Message Text="Will be tokenized: %(TokenizedFiles.Identity)" />
        <TemplateFile Template="%(TokenizedFiles.FullPath)" OutputFilename="%(TokenizedFiles.FullPath).out" Tokens="@(Tokens)"	Condition="'@(TokenizedFiles)'!=''" />
        <Copy SourceFiles="%(TokenizedFiles.FullPath).out" DestinationFiles="%(TokenizedFiles.FullPath)"	Condition="'@(TokenizedFiles)'!=''" />
        <Delete Files="%(TokenizedFiles.FullPath).out" Condition="'@(TokenizedFiles)'!=''" />

    </Target>
    <!--///////////////////////////End Target MakeDistributiveSetupSubstitute////////////////////////////////////////////-->


    <!--///////////////////////////Target RunIntegrationalTestPrepare///////////////////////////////////////////////-->
    <Target Name="RunIntegrationalTestPrepare" Condition="$(PerformUnitTestPrepare)" DependsOnTargets="PrepareEnvironment"><!-- prepares database for integrational tests -->
            <Exec
              Command="ImpPrepareIntTestDB.cmd"
              WorkingDirectory="$(AssemblyRoot)\Tools\DB"
              StdOutEncoding="UTF-8"
              Condition=""
              ContinueOnError="true" />
    </Target>
    <!--///////////////////////////End Target RunIntegrationalTestPrepares//////////////////////////////////////////-->


    <!--///////////////////////////Target RunTests//////////////////////////////////////////////////////-->
    <Target Name="RunTests" DependsOnTargets="PrepareEnvironment">

        <CallTarget Targets="RunUnitTestsAllinOne" />
        <CallTarget Targets="RunNcover" />

    </Target>
    <!--///////////////////////////End Target RunTests//////////////////////////////////////////////////-->


    <!--///////////////////////////Target RunUnitTestsAllinOne//////////////////////////////////////////////////////-->
    <Target Name="RunUnitTestsAllinOne" Condition="$(PerformUnitTesting)" DependsOnTargets="PrepareEnvironment">

        <CreateItem
            Include="$(AssemblyRoot)\Tests\*Tests*.dll"
            Exclude="">
            <Output
                TaskParameter="Include"
                ItemName="TestAssemblyList" />
        </CreateItem>

        <MSBuild.Community.Tasks.NUnit
            Assemblies="@(TestAssemblyList)"
            DisableShadowCopy="true"
            ProjectConfiguration="$(Configuration)"
            OutputXmlFile="$(CodeMetricsRoot)\$(ProductName).nunit-results.xml"
            ToolPath="$(NUnitPath)"
            ContinueOnError="true"
            Condition="'$(TestAssemblyList)' != ''"
        />

    </Target>
    <!--///////////////////////////End Target RunUnitTestsAllinOne//////////////////////////////////////////////////-->


    <!--///////////////////////////Target RunNCover/////////////////////////////////////////////////////////////////-->
    <Target Name="RunNCover" Condition="Exists('$(NCoverPath)') And $(PerformUnitTesting) AND '@(TestProjectList)' != ''" DependsOnTargets="PrepareEnvironment">
        <!-- only ncover 3.4 supports .net 4 -->
        <CreateItem
            Include="$(AssemblyRoot)\Tests\*Tests*.dll"
            Exclude="">
            <Output
                TaskParameter="Include"
                ItemName="TestAssemblyList"
                />
        </CreateItem>

        <NCover.MSBuildTasks.NCover
            ToolPath="$(NCoverPath)"
            TestRunnerExe="&quot;$(NUnitPath)\$(NUnitEXE)&quot;"
            TestRunnerArgs="%(TestAssemblyList.FullPath) /nologo /nodots /noshadow /config=$(Configuration) /xml=$(CodeMetricsRoot)\$(ProductName).nunit-%(TestAssemblyList.Filename)-results.xml"
            CoverageFile="$(CodeMetricsRoot)\$(ProductName).ncover-%(TestAssemblyList.FileName)-results.xml"
            BuildId="$(ProductVersion)"
            IncludeAssemblies="$(ProductPrefix)*.*"
            WorkingDirectory=""
            ContinueOnError="false">
            <Output TaskParameter="ExitCode" ItemName="ExitNunitCodes"/>
        </NCover.MSBuildTasks.NCover>

        <CreateItem Include="$(CodeMetricsRoot)\$(ProductName).ncover-*-results.xml">
                <Output
                    TaskParameter="Include"
                    ItemName="CoverageDataFiles"/>
        </CreateItem>

        <NCover.MSBuildTasks.NCoverReporting
            ToolPath="$(NCoverPathx64)"
            CoverageDataPaths="@(CoverageDataFiles)"
            MaxTopUncoveredToReport="50"
            ProjectName="$(ProductName)"
            SortBy="ClassLine"
            OutputReport="$(CoverageReports)"
            WorkingDirectory="$(CodeMetricsRoot)"
            ContinueOnError="false" />

        <Delete Files="@(CoverageDataFiles)" />

        <!--Error Text="Unit Test error occurred" Condition="'%(ExitNunitCodes.Identity)'>10"/-->

    </Target>
    <!--////////////////////////////////End Target RunNCover////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target RunStyleCop///////////////////////////////////////////////////////////////-->
    <Target Name="RunStyleCop" Condition="$(PerformCodeAnalysis)" DependsOnTargets="PrepareEnvironment">

        <Message Text="StyleCop validation" />

        <CreateItem
            Include="%(StyleCopCodeQualityProjectList.RootDir)%(StyleCopCodeQualityProjectList.Directory)**\*.cs"
            Exclude="%(StyleCopCodeQualityProjectList.RootDir)%(StyleCopCodeQualityProjectList.Directory)**\*.Designer.cs">
            <Output TaskParameter="Include" ItemName="StyleCopFiles" />
        </CreateItem>

        <Microsoft.StyleCop.StyleCopTask
            ProjectFullPath="$(SolutionRoot)"
            SourceFiles="@(StyleCopFiles)"
            ForceFullAnalysis="true"
            DefineConstants="DEBUG TRACE CODE_ANALYSIS"
            TreatErrorsAsWarnings="true"
            CacheResults="false"
            OverrideSettingsFile="$(StyleCopSettingsFile)"
            OutputFile="$(CodeMetricsRoot)\$(ProductName).stylecop-results.xml"
            MaxViolationCount="1" />

    </Target>
    <!--///////////////////////////End Target RunStyleCop///////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target RunSimian/////////////////////////////////////////////////////////////////-->
    <Target Name="RunSimian" Condition="$(PerformCodeAnalysis)" DependsOnTargets="PrepareEnvironment">

        <Exec
            Command="&quot;$(SimianPath)\simian-2.2.24.exe&quot; -threshold=10 -formatter=xml:&quot;$(CodeMetricsRoot)\$(ProductName).simian-results.xml&quot; @(SimianCodeQualityProjectList->'-includes=&quot;%(RootDir)%(Directory)**\*.cs&quot; -includes=&quot;%(RootDir)%(Directory)*.cs&quot; -excludes=&quot;%(RootDir)%(Directory)**\*Designer*.cs&quot; -excludes=&quot;%(RootDir)%(Directory)**\*.g.cs&quot; -excludes=&quot;%(RootDir)%(Directory)**\Reference.cs&quot;', ' ')"
            ContinueOnError="false"
            IgnoreExitCode="true" />

    </Target>
    <!--///////////////////////////End Target RunSimian/////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target RunFxCop//////////////////////////////////////////////////////////////////-->
    <Target Name="RunFxCop" Condition="$(PerformCodeAnalysis) AND '@(FxCopCodeQualityProjectGroup)' != '' " Inputs="@(FxCopCodeQualityProjectGroup)" Outputs="%(Identity)" DependsOnTargets="PrepareEnvironment">

        <ItemGroup>
            <FxCopCodeQualityProjectList
                Remove="@(FxCopCodeQualityProjectList)" />
            <FxCopCodeQualityProjectList
                Include="%(FxCopCodeQualityProjectGroup.Items)" />
                
            <FxCopCodeQualityRules
                Remove="@(FxCopCodeQualityRules)" />
            <FxCopCodeQualityRules
                Include="@(CommonCodeAnalysisRules)" />
            <FxCopCodeQualityRules
                Include="%(FxCopCodeQualityProjectGroup.Rules)" />
            <FxCopCodeQualityRuleFiles
                Remove="@(FxCopCodeQualityRuleFiles)" />
            <FxCopCodeQualityRuleFiles
                Include="@(CommonCodeAnalysisRuleFiles)" />
            <FxCopCodeQualityRuleFiles
                Include="%(FxCopCodeQualityProjectGroup.RuleFiles)" />
        </ItemGroup>

        <!-- include bin/$(Configuration)/file.dll -->
        <CreateProperty
            Value="%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\$(Configuration)\%(FxCopCodeQualityProjectList.FileName).dll"
            Condition="Exists('%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\$(Configuration)\%(FxCopCodeQualityProjectList.FileName).dll')" >
            <Output TaskParameter="Value" ItemName="FxCopFiles" />
        </CreateProperty>

        <!-- include bin/$(Configuration)/file.exe -->
        <CreateProperty
            Value="%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\$(Configuration)\%(FxCopCodeQualityProjectList.FileName).exe"
            Condition="Exists('%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\$(Configuration)\%(FxCopCodeQualityProjectList.FileName).exe')" >
            <Output TaskParameter="Value" ItemName="FxCopFiles" />
        </CreateProperty>

        <!-- include bin/file.dll -->
        <CreateProperty
            Value="%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\%(FxCopCodeQualityProjectList.FileName).dll"
            Condition="Exists('%(FxCopCodeQualityProjectList.RootDir)%(FxCopCodeQualityProjectList.Directory)bin\%(FxCopCodeQualityProjectList.FileName).dll')" >
            <Output TaskParameter="Value" ItemName="FxCopFiles" />
        </CreateProperty>

        <Exec Command="&quot;$(FxCopPath)\fxcopcmd.exe&quot; @(FxCopFiles->'/f:&quot;%(Identity)&quot;', ' ') @(FxCopCodeQualityRules->'/rid:%(Identity)', ' ') /o:&quot;$(CodeMetricsRoot)\$(ProductName).fxcop-results-%(FxCopCodeQualityProjectGroup.Identity).xml&quot; /igc /gac /dic:&quot;$(DictionaryFile)&quot;"
            Condition="'@(FxCopCodeQualityRuleFiles)' == ''"
            ContinueOnError="true" />

        <Exec Command="&quot;$(FxCopPath)\fxcopcmd.exe&quot; @(FxCopFiles->'/f:&quot;%(Identity)&quot;', ' ') @(FxCopCodeQualityRuleFiles->'/rs:=&quot;%(Identity)&quot;', ' ') /o:&quot;$(CodeMetricsRoot)\$(ProductName).fxcop-results-%(FxCopCodeQualityProjectGroup.Identity).xml&quot; /igc /gac /dic:&quot;$(DictionaryFile)&quot;"
            Condition="'@(FxCopCodeQualityRuleFiles)' != ''"
            ContinueOnError="true" />

    </Target>
    <!--///////////////////////////End Target RunFxCop//////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target CopyDistributive//////////////////////////////////////////////////////////-->
    <Target Name="CopyDistributive" Condition="$(PerformArchive)">

        <CreateProperty Value="$(ArchiveRoot)\$(BuildType)\$(ProductVersion)\$(ProductName)">
            <Output
                TaskParameter="Value"
                PropertyName="ArchiveDistributivePath" />
        </CreateProperty>
        <RemoveDir
            Directories="$(ArchiveDistributivePath)"
            Condition="Exists('$(ArchiveDistributivePath)')" />
        <Exec Command='xcopy /E /Q /Y "$(AssemblyRoot)" "$(ArchiveDistributivePath)\"' />
        <!--RemoveDir
            Directories="$(AssemblyRoot)" /-->

    </Target>
    <!--///////////////////////////End Target CopyDistributive//////////////////////////////////////////////////////-->


    <!--///////////////////////////Target PrepareDB///////////////////////////////////////////////////////////////////-->
    <Target Name="PrepareDB">

        <Message Text="Path - $(AssemblyRoot)\Tools\DB" />
        <Exec
            Command="PrepareDB.cmd"
            WorkingDirectory="$(AssemblyRoot)\Tools\DB"
            ContinueOnError="false" />
        <Message Text="Installed" />

    </Target>
    <!--///////////////////////////End Target PrepareDB///////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target Install///////////////////////////////////////////////////////////////////-->
    <Target Name="Install">

        <Exec
            Command="Setup.cmd"
            CustomErrorRegularExpression="Error: "
            CustomWarningRegularExpression="Warning: "
            WorkingDirectory="$(AssemblyRoot)"
            ContinueOnError="false" />
        <Message Text="Installed" />

    </Target>
    <!--///////////////////////////End Target Install///////////////////////////////////////////////////////////////-->


    <!--///////////////////////////Target ValidateProduct///////////////////////////////////////////////////////////-->
    <Target Name="ValidateProduct" Condition="'@(ValidationHttpRequest)' != '' ">

        <HttpRequest Url="%(ValidationHttpRequest.Identity)"
            EnsureResponseContains="%(ValidationHttpRequest.EnsureResponseContains)"
            FailOnNon2xxResponse="true" />

    </Target>
    <!--///////////////////////////End Target ValidateProduct///////////////////////////////////////////////////////-->

    
</Project>